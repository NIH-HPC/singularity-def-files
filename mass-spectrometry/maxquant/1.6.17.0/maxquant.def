BootStrap: debootstrap
OSVersion: xenial
MirrorURL: http://us.archive.ubuntu.com/ubuntu/

%post
    echo 'deb http://security.ubuntu.com/ubuntu xenial-security main restricted' >> /etc/apt/sources.list
    apt-get update
    apt-get -y install wget tar unzip
    apt-get update
    apt-get clean

# Install Mono
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    apt -y install apt-transport-https ca-certificates
    echo "deb https://download.mono-project.com/repo/ubuntu stable-xenial main" | tee /etc/apt/sources.list.d/mono-official-stable.list
    apt-get update
    apt-get -y install mono-devel
    apt-get -y install mono-complete

# Install MaxQuant (already downloaded to /tmp)
    unzip -d /opt /tmp/MaxQuant_1.6.17.0.zip
    chmod -R a+rX /opt/MaxQuant

# Get .NET binaries
    [ ! -f /tmp/dotnet-sdk-2.1.811-linux-x64.tar.gz ] && wget -P /tmp https://download.visualstudio.microsoft.com/download/pr/4281b67c-db32-4e7e-aa67-976a59839b81/75373c7621c37c2ac7a83fc60d415afd/dotnet-sdk-2.1.811-linux-x64.tar.gz
    [ ! -f /tmp/aspnetcore-runtime-2.1.23-linux-x64.tar.gz ] && wget -P /tmp https://download.visualstudio.microsoft.com/download/pr/3422a123-3f37-4544-b0ed-e3922b50e1b0/c34c607ba18a67763bacded434607c56/aspnetcore-runtime-2.1.23-linux-x64.tar.gz
    mkdir /opt/dotnet
    tar zxf /tmp/dotnet-sdk-2.1.811-linux-x64.tar.gz -C "/opt/dotnet" 
    tar zxf /tmp/aspnetcore-runtime-2.1.23-linux-x64.tar.gz -C "/opt/dotnet" 

# Set the bindpaths
    mkdir /gpfs /spin1 /scratch /lscratch /data /fdb /usr/local/apps /vf
    for i in 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do
        ln -s /gpfs/gsfs${i} /gs${i};
    done

%environment
    export LC_ALL=C
    export DOTNET_ROOT=/opt/dotnet
    export PATH=$PATH:/opt/dotnet

# MaxQuantCmd.exe

%apphelp MaxQuantCmd.exe

usage: singularity run --app MaxQuantCmd.exe mqpar.xml

MaxQuantCmd 1.6.5.0
Copyright Â© Max-Planck-Institute of Biochemistry 2010
USAGE:
Complete run of an existing mqpar.xml file:
MaxQuantCmd.exe mqpar.xml
Print job ids/names table:
MaxQuantCmd.exe --dryrun mqpar.xml
Rerunning second and third parts of the analysis:
MaxQuantCmd.exe --partial-processing-end=3 --partial-processing=1 mqpar.xml

  -p, --partial-processing        (Default: 0) Start processing from the specified job id. Can be used to continue/redo parts of the processing. Job id's can be obtained in the MaxQuant GUI
                                  partial processing view or from --dryrun option.

  -e, --partial-processing-end    (Default: 2147483647) Finish processing at the specified job id. 0-based indexing is used.

  -n, --dryrun                    Print job ids and job names table.

  -c, --create                    Create a template of MaxQuant parameter file.

  --help                          Display this help screen.

  --version                       Display version information.

  mqpar (pos. 0)                  Required. Path to the mqpar.xml file. If you do not have an mqpar.xml, you can generate one using the MaxQuant GUI or use --create option.

%apprun MaxQuantCmd.exe

    exec mono /opt/MaxQuant/bin/MaxQuantCmd.exe "$@"

# MaxQuantGui.exe

%apphelp MaxQuantGui.exe

    usage: singularity run --app MaxQuantGui.exe

%apprun MaxQuantGui.exe

    exec mono /opt/MaxQuant/bin/MaxQuantGui.exe


